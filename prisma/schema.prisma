// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                     String                       @id @default(uuid())
  email                  String                       @unique
  password               String
  isDelete               Boolean                      @default(false)
  role                   Role
  client                 Client?
  professional           Professional?
  space                  Space?

  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt @default(now())

  @@map("users")
}

model Client {
  id                     String                       @id @default(uuid())
  userId                 String                       @unique
  name                   String
  cpf                    String
  phoneNumber            String
  photo                  String?
  objective              String                   
  experienceLevel        String
  birthday               DateTime
  user                   User?                        @relation(fields: [userId], references: [id])

  bookings               Booking[]
  clientsProfessional    ClientsProfessional[]
  chats                  Chat[]  
  payments               Payment[] 
  diaries                Diary[]  
  ratings                Rating[]      

  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt @default(now())

  @@map("clients")
}

model Professional {
  id                      String                      @id @default(uuid())
  userId                  String                      @unique
  name                    String
  phoneNumber             String?
  description             String?
  typeUser                String? 
  cpfOrCnpj               String? 
  cref                    String 
  valueConsultancy        Float? 
  photo                   String?
  birthday                DateTime      
  enableConsultancy       Boolean                     @default(false)
  descriptionConsultancy  String?
  valueLesson             Float? 
  enableLesson            Boolean                     @default(false)
  recipientId             String?
  recipientStatus         String?
  finishProfile           Boolean                     @default(false)

  clientsProfessional     ClientsProfessional[]
  photos                  PhotosProfessional[]
  spaces                  ProfessionalSpace[]
  workSchedules           WorkSchedule[]
  schedules               Schedule[]
  bookings                Booking[]
  chats                   Chat[]
  payments                Payment[]   
  ratings                 Rating[]    

  user                    User                        @relation(fields: [userId], references: [id])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("professionals")
}

model Space {
  id                      String                      @id @default(uuid()) 
  userId                  String?                     @unique      
  name                    String
  description             String?
  phoneNumber             String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  complement              String?
  neighborhood            String?
  number                  String?
  photo                   String?
  typeUser                String? 
  cpfOrCnpj               String? 
  latitude                Float
  longitude               Float
  valueDiarie             Float?
  descriptionDiarie       String?
  enableDiarie            Boolean                     @default(false)
  recipientId             String?
  recipientStatus         String?
  finishProfile           Boolean                     @default(false)

  photos                  PhotosSpace[]       
  professionals           ProfessionalSpace[]     
  spaceHours              SpaceHours[]  
  payments                Payment[]
  diaries                 Diary[]    
  ratings                 Rating[]    

  user                    User?                       @relation(fields: [userId], references: [id])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("spaces")
}

model PhotosProfessional {
  id                      String                      @id @default(uuid())
  userId                  String                         
  photo                   String                 

  professional            Professional                @relation(fields: [userId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("photosProfessional")
}

model PhotosSpace {
  id                      String                      @id @default(uuid())
  userId                  String                         
  photo                   String                   

  space                   Space                       @relation(fields: [userId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("photosSpace")
}

model WorkSchedule {
  id                      String                      @id @default(uuid())
  professionalId          String               
  dayOfWeek               Int                             
  startTime               String                     
  endTime                 String                     

  professional            Professional                @relation(fields: [professionalId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt 

  @@unique([professionalId, dayOfWeek])

  @@map("workScheludes")
}

model SpaceHours {
  id                      String                      @id @default(uuid())
  spaceId                 String               
  dayOfWeek               Int                             
  startTime               String                     
  endTime                 String                     

  space                   Space                       @relation(fields: [spaceId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt 

  @@unique([spaceId, dayOfWeek])

  @@map("spaceHours")
}

model Schedule {
  id                      String                      @id @default(uuid())
  professionalId          String
  clientProfessionalId    String?
  dayOfWeek               Int 
  recurring               Boolean 
  isBlock                 Boolean              
  startTime               String 
  endTime                 String 
  date                    DateTime
  description             String?       

  clientProfessional      ClientsProfessional?        @relation(fields: [clientProfessionalId], references: [id])
  professional            Professional                @relation(fields: [professionalId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt 

  @@unique([professionalId, clientProfessionalId, dayOfWeek])

  @@map("scheludes")
}

model Booking {
  id                      String                      @id @default(uuid())
  professionalId          String
  clientId                String
  startTime               String  
  endTime                 String 
  date                    DateTime            
  status                  BookingStatus               @default(pending)  
  presence                String?                         
  paymentId               String?                     @unique           
  academy                 String?                                                     
  scheduleId              String? 

  client                  Client                      @relation(fields: [clientId], references: [userId])
  professional            Professional                @relation(fields: [professionalId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt

  @@map("bookings")
}

model ProfessionalSpace {
  id                      String                      @id @default(uuid())
  professionalId          String               
  spaceId                 String                       
  professional            Professional                @relation(fields: [professionalId], references: [userId])
  space                   Space                       @relation(fields: [spaceId], references: [userId])

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("professionalSpace")
}

model Diary {
  id                      String                      @id @default(uuid())
  clientId                String               
  spaceId                 String                
  paymentId               String     
  used                    Boolean     
  dateUsed                DateTime                    @default(now())    
  status                  String                      @default("pending") 

  client                  Client                      @relation(fields: [clientId], references: [userId])
  space                   Space                       @relation(fields: [spaceId], references: [userId])
  payment                 Payment                     @relation(fields: [paymentId], references: [id])

  createdAt               DateTime                    @default(now())

  @@map("diaries")
}

model ClientsProfessional {
  id                      String                      @id @default(uuid())
  email                   String
  phoneNumber             String  
  name                    String  
  status                  Status
  initConsultancy         Boolean                     @default(false)                    
  dayDue                  Int                         @default(1)
  datePayment             DateTime                    @default(now()) 
  consultancy             Boolean                      
  academy                 String?  
  value                   Float         
  professionalId          String
  clientId                String?   

  professional            Professional                @relation(fields: [professionalId], references: [userId])
  client                  Client?                     @relation(fields: [clientId], references: [userId])

  payments                Payment[]
  schedules               Schedule[]                  

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@unique([professionalId, email])
  @@unique([professionalId, clientId])

  @@map("clientsProfessional")
}


model Payment {
  id                      String                      @id @default(uuid())
  name                    String
  value                   Float  
  clientId                String
  orderId                 String                      @unique
  status                  String                      @default("pending") 
  type                    TypePayment                   
  clientProfessionalId    String? 
  professionalId          String? 
  spaceId                 String?  
  recurring               Boolean                     @default(false)
  amount                  Int 
  rate                    Float                       @default(0)
  valueUnit               Float  

  professional            Professional?               @relation(fields: [professionalId], references: [userId])
  clientProfessional      ClientsProfessional?        @relation(fields: [clientProfessionalId], references: [id])
  space                   Space?                      @relation(fields: [spaceId], references: [userId])
  client                  Client                      @relation(fields: [clientId], references: [userId])  

  diaries                 Diary[] 

  date                    DateTime                    @default(now())
  expireAt                DateTime                    @default(now())         
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("payments")
}

model Chat {
  id                      String                      @id @default(uuid())
  clientId                String
  professionalId          String
  client                  Client                      @relation(fields: [clientId], references: [userId])
  professional            Professional                @relation(fields: [professionalId], references: [userId])

  messages                Message[]                          

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("chats")
}

model Rating {
  id                      String                      @id @default(uuid())
  description             String
  rate                    Int   
  clientId                String                        
  professionalId          String? 
  spaceId                 String?  

  professional            Professional?               @relation(fields: [professionalId], references: [userId])
  space                   Space?                      @relation(fields: [spaceId], references: [userId])
  client                  Client                      @relation(fields: [clientId], references: [userId])                      

  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt @default(now())

  @@map("ratings")
}

model Message {
  id                      String                      @id @default(uuid())
  content                 String
  userId                  String
  chatId                  String
  chat                    Chat                        @relation(fields: [chatId], references: [id])

  createdAt               DateTime                    @default(now())

  @@map("messages")
}

model PasswordForgot {
  id         String    @id @default(uuid())
  email      String
  code       String
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())

  @@map("passwords_forgot")
}

model Notification {
  id         String    @id @default(uuid())
  title      String
  message    String
  userId     String?
  open       Boolean          
  dateOpen   DateTime  @default(now())
  createdAt  DateTime  @default(now())

  @@map("notifications")
}

enum Role {
  CLIENT
  PROFESSIONAL
  SPACE
}

enum BookingStatus {
  confirm
  pending
  cancelled
}

enum Status {
  awaiting_registration
  awaiting_payment
  paid
  overdue
  cancelled
}

enum TypePayment {
  DIARY
  RECURRING
  LESSON
}